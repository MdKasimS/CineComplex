// <auto-generated />
using System;
using CineComplex.Classes.SQL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CineComplex.Migrations
{
    [DbContext(typeof(CineComplexDb))]
    [Migration("20250316232540_MappedCinePlexEM")]
    partial class MappedCinePlexEM
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.6");

            modelBuilder.Entity("CineComplex.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountProfileId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("BuildingDetails")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("OtherDetails")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("PinCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountProfileId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("CineComplex.Models.Auth", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte>("PrivilegeLevel")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId");

                    b.ToTable("Auths");
                });

            modelBuilder.Entity("CineComplex.Models.BankAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AccountHolderName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("GSTNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("IFSCNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserProfileId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("CineComplex.Models.CinePlex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountProfileId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CineplexName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("NumberOfTheatres")
                        .HasColumnType("INTEGER");

                    b.Property<string>("OperatorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AccountProfileId");

                    b.ToTable("Cineplexes");
                });

            modelBuilder.Entity("CineComplex.Models.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CinemaCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DirectorName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("Duration")
                        .HasColumnType("REAL");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("MovieName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProducerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Story")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Movie");
                });

            modelBuilder.Entity("CineComplex.Models.Seat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ColumnNum")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("RowNum")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SeatAvailability")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TheatreId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TypeOfSeat")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TheatreId");

                    b.ToTable("Seat");
                });

            modelBuilder.Entity("CineComplex.Models.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExpirationTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LoginTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("CineComplex.Models.Show", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("GoldSeatRate")
                        .HasColumnType("TEXT");

                    b.Property<int>("MovieId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("PlatinumSeatRate")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("SilverSeatRate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("TheatreId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("TheatreId");

                    b.ToTable("Show");
                });

            modelBuilder.Entity("CineComplex.Models.Theatre", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Capacity")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CinePlexId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TheatreNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserProfileId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Theatre");
                });

            modelBuilder.Entity("CineComplex.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("SeatId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ShowId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StatusOfTciket")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SeatId")
                        .IsUnique();

                    b.HasIndex("ShowId");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("CineComplex.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountProfileId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Contact")
                        .IsUnique();

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CineComplex.Models.UserProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("CineComplex.Models.Address", b =>
                {
                    b.HasOne("CineComplex.Models.UserProfile", "AccountProfile")
                        .WithMany("AddressDetails")
                        .HasForeignKey("AccountProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountProfile");
                });

            modelBuilder.Entity("CineComplex.Models.BankAccount", b =>
                {
                    b.HasOne("CineComplex.Models.UserProfile", "AccountProfile")
                        .WithMany("BankDetails")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountProfile");
                });

            modelBuilder.Entity("CineComplex.Models.CinePlex", b =>
                {
                    b.HasOne("CineComplex.Models.UserProfile", "AccountProfile")
                        .WithMany("CinePlexes")
                        .HasForeignKey("AccountProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountProfile");
                });

            modelBuilder.Entity("CineComplex.Models.Seat", b =>
                {
                    b.HasOne("CineComplex.Models.Theatre", "CineComplexTheatre")
                        .WithMany("SeatsInTheatre")
                        .HasForeignKey("TheatreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CineComplexTheatre");
                });

            modelBuilder.Entity("CineComplex.Models.Session", b =>
                {
                    b.HasOne("CineComplex.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CineComplex.Models.Show", b =>
                {
                    b.HasOne("CineComplex.Models.Movie", "MovieOfTheShow")
                        .WithMany("AllShows")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CineComplex.Models.Theatre", "HostingTheatre")
                        .WithMany("AllShowsOfThisTheatre")
                        .HasForeignKey("TheatreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("HostingTheatre");

                    b.Navigation("MovieOfTheShow");
                });

            modelBuilder.Entity("CineComplex.Models.Theatre", b =>
                {
                    b.HasOne("CineComplex.Models.CinePlex", "CineComplexOfTheatre")
                        .WithMany("Theatres")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CineComplex.Models.UserProfile", null)
                        .WithMany("TheatresInCineplex")
                        .HasForeignKey("UserProfileId");

                    b.Navigation("CineComplexOfTheatre");
                });

            modelBuilder.Entity("CineComplex.Models.Ticket", b =>
                {
                    b.HasOne("CineComplex.Models.Seat", "SeatBooked")
                        .WithOne("TicketForThisSeat")
                        .HasForeignKey("CineComplex.Models.Ticket", "SeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CineComplex.Models.Show", "ShowBooked")
                        .WithMany("TicketsOfTheShow")
                        .HasForeignKey("ShowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SeatBooked");

                    b.Navigation("ShowBooked");
                });

            modelBuilder.Entity("CineComplex.Models.UserProfile", b =>
                {
                    b.HasOne("CineComplex.Models.User", "UserAccount")
                        .WithOne("AccountProfile")
                        .HasForeignKey("CineComplex.Models.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UserAccount");
                });

            modelBuilder.Entity("CineComplex.Models.CinePlex", b =>
                {
                    b.Navigation("Theatres");
                });

            modelBuilder.Entity("CineComplex.Models.Movie", b =>
                {
                    b.Navigation("AllShows");
                });

            modelBuilder.Entity("CineComplex.Models.Seat", b =>
                {
                    b.Navigation("TicketForThisSeat")
                        .IsRequired();
                });

            modelBuilder.Entity("CineComplex.Models.Show", b =>
                {
                    b.Navigation("TicketsOfTheShow");
                });

            modelBuilder.Entity("CineComplex.Models.Theatre", b =>
                {
                    b.Navigation("AllShowsOfThisTheatre");

                    b.Navigation("SeatsInTheatre");
                });

            modelBuilder.Entity("CineComplex.Models.User", b =>
                {
                    b.Navigation("AccountProfile")
                        .IsRequired();
                });

            modelBuilder.Entity("CineComplex.Models.UserProfile", b =>
                {
                    b.Navigation("AddressDetails");

                    b.Navigation("BankDetails");

                    b.Navigation("CinePlexes");

                    b.Navigation("TheatresInCineplex");
                });
#pragma warning restore 612, 618
        }
    }
}
